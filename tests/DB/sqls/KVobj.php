<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-21 at 10:09:26.
 */
class SoohDBTestKVObj extends \PHPUnit_Framework_TestCase {

	protected function setUpReal($driver)
	{
		$ini = \Sooh\Base\Ini::getInstance();
		$old = $ini->get('dbConf');
		
		$this->driver = $driver;
		$db_0 = $driver.'0';
		$db_1 = $driver.'1';
		$lines = file(__DIR__.'/../sqls/connect.ini');
		foreach($lines as $line){
			$tmp = explode('=', $line);
			if($tmp[0]==$db_0 || $db_1==$tmp[0]){
				$id = array_shift($tmp);
				$tmp = json_decode(implode('=', $tmp),true);
				$old[$id]=$tmp;
			}
		}
		$ini->initGobal(array('dbConf'=>$old));
		
		$old = $ini->get('dbByObj');
		$old['TstKVObj'] = array($db_0,$db_1);
		$ini->initGobal(array('dbByObj'=>$old));
		
		$this->getDB($db_1)->delRecords('tb_1',array('autoid'=>99));
	}
	protected $driver;
	/**
	 * 
	 * @return \Soob\DB\Interfaces\All
	 */
	protected function getDB($dbid)
	{
		return \Sooh\DB\Broker::getInstance($dbid);
	}
	public function testLoad() {
		
		$obj = TstKVObj::getCopy(array('autoid'=>1));
		$obj->load();
		$this->AssertEquals('a',  $obj->getField('val')  );
		TstKVObj::freeAll(array('autoid'=>1));
		$obj=null;
		
		$obj = TstKVObj::getCopy(array('pkey'=>201,'subkey'=>260));
		$obj->load('autoid');
		$this->AssertEquals(6,  $obj->getField('autoid')  );
		
		$this->AssertEquals(false, $obj->exists('val'));
		TstKVObj::freeAll(array('pkey'=>201,'subkey'=>260));
		$obj=null;
	}
	
	public static function provider_paged()
	{
		return array(
				//sortDefine,where,		$totalRecords
				//$firstPage, $secondPage,$fifthPage,$thirdPage
			array(
				array('pkey'=>'sort','subkey'=>'rsort'),	array('autoid>'=>3),		9,
				'[6,201,260,c][5,201,250,c]','[4,201,240,b][12,202,260,f]','[7,202,210,d]','[11,202,250,f][10,202,240,e]'
			),
			array(
				array('pkey'=>'rsort','subkey'=>'sort'),	array(),		12,
				'[7,202,210,d][8,202,220,d]','[9,202,230,e][10,202,240,e]','[3,201,230,b][4,201,240,b]','[11,202,250,f][12,202,260,f]'
			),
			array(
				array('autoid'=>'sort',),	array(),		12,
				'[1,201,210,a][2,201,220,a]','[3,201,230,b][4,201,240,b]','[9,202,230,e][10,202,240,e]','[5,201,250,c][6,201,260,c]'
			),

		);
	}
	/**
	 * @dataProvider provider_paged
	 */
	public function testPaged($sortDefine, $where, $rsTotal, $firstPage, $secondPage,$fifthPage,$thirdPage)
	{
		$obj = TstKVObj::getCopy(array('autoid'=>0));
		$pagesize=2;
		$pager = new \Sooh\DB\Pager($pagesize, array(2),false);

		$this->AssertEquals($rsTotal,$obj->loopGetRecordsCount($where),' rs-count error with autoid>3');
		//firstPage
		$pager->init($rsTotal, 1);
		$ret = $obj->loopGetRecordsPage($sortDefine, array('where'=>$where), $pager);
		$this->AssertEquals($firstPage, $obj->fmtRecords($ret),' failed at page 1');
		//secondPage
		$pager->init($rsTotal, 2);
		$ret = $obj->loopGetRecordsPage($sortDefine, $ret['lastPage'], $pager);
		$this->AssertEquals($secondPage, $obj->fmtRecords($ret),' failed at page 2');
		
		$pager->init($rsTotal, 5);
		$ret = $obj->loopGetRecordsPage($sortDefine, $ret['lastPage'], $pager);
		$this->AssertEquals($fifthPage, $obj->fmtRecords($ret),' failed at page 5');
		
		$pager->init($rsTotal, 3);
		$ret = $obj->loopGetRecordsPage($sortDefine, $ret['lastPage'], $pager);
		$this->AssertEquals($thirdPage, $obj->fmtRecords($ret),' failed at page 3');
		
		TstKVObj::freeAll(array('autoid'=>0));
		$obj=null;
	}
	
	public function testCreate()
	{
		$obj = TstKVObj::getCopy(array('autoid'=>99));
		$obj->setField('pkey', 91);
		$obj->setField('subkey', 92);
		$obj->setField('val', 'tst');
		$obj->update();
		
		TstKVObj::freeAll(array('autoid'=>99));
		$obj=null;
		
		$obj = TstKVObj::getCopy(array('autoid'=>99));
		$pkey = $obj->load();
		$this->AssertEquals(array('autoid'=>99), $pkey);
		$this->AssertEquals(91, $obj->getField('pkey'));
		$this->AssertEquals(true, $obj->exists());
		$this->AssertEquals(true, $obj->exists('pkey'));
		$obj->delete();
		
		TstKVObj::freeAll(array('autoid'=>99));
		$obj=null;
		
		$obj = TstKVObj::getCopy(array('autoid'=>99));
		$pkey=$obj->load();
		$this->AssertEquals(null, $pkey, 'delete failed a');
		$this->AssertEquals(false, $obj->exists(), 'delete failed b');
		$this->AssertEquals(false, $obj->exists('pkey'), 'delete failed c');
	}
	
	public function testLock()
	{
		//测试进程内锁定，解锁
		$obj = TstKVObj::getCopy(array('autoid'=>99));
		$obj->setField('pkey', 91);
		$obj->setField('subkey', 92);
		$obj->setField('val', 'tst');
		$obj->update();
		
		$this->AssertEquals(false, $obj->isLocked(), 'islock()');
		
		$verid = $obj->db()->getOne($obj->tbname(),'iRecordVerID',array('autoid'=>99));
		$this->AssertEquals(1, $verid, 'verid error on new of '.$obj->tbname());
		$obj->lock();
		$verid = $obj->db()->getOne($obj->tbname(),'iRecordVerID',array('autoid'=>99));
		$this->AssertGreaterThan(103220943000000001, $verid, 'verid in db error on locked');
		$verid = $obj->getField('iRecordVerID');
		$this->AssertGreaterThan(103220943000000001, $verid, 'verid in code error on locked');
		
		$this->AssertEquals(true, $obj->isLocked(), 'islock()');
		$obj->unlock();
		$verid = $obj->db()->getOne($obj->tbname(),'iRecordVerID',array('autoid'=>99));
		$this->AssertEquals(1, $verid, 'verid error on onlock');
		
		$obj->setField('pkey', 95);
		$obj->update();
		
		$verid = $obj->db()->getOne($obj->tbname(),'pkey',array('autoid'=>99));
		$this->AssertEquals(95, $verid, 'update failed error after unlock');
		
		//测试load的一个被锁住的
		$verid = $obj->db()->updRecords($obj->tbname(),array('iRecordVerID'=>'183220943000000001'),array('autoid'=>99));
		
		TstKVObj::freeAll(array('autoid'=>99));
		$obj=null;

		$obj = TstKVObj::getCopy(array('autoid'=>99));
		$obj->load();
		$this->AssertEquals(true, $obj->isLocked(), 'islock() for load locked already');
		try{
			$obj->update();
			$this->Fail('lock not works when loaded a locked-record');
		}  catch (\ErrorException $e){

		}
		////测试一个load后被其他人锁住的
		$verid = $obj->db()->updRecords($obj->tbname(),array('iRecordVerID'=>'2'),array('autoid'=>99));
		TstKVObj::freeAll(array('autoid'=>99));
		$obj=null;
		$obj = TstKVObj::getCopy(array('autoid'=>99));
		$obj->load();
		$this->AssertEquals(false, $obj->isLocked(), 'islock() for load locked already');
		try{
			$obj->setField('pkey', 99);
			$obj->db()->updRecords($obj->tbname(),array('iRecordVerID'=>'183220943000000001'),array('autoid'=>99));
			
			$obj->update();
			$this->Fail('lock not works when update a locked-record');
		}  catch (\ErrorException $e){

		}
		
		$obj->delete();
		TstKVObj::freeAll(array('autoid'=>99));
		$obj=null;
	}
	public function testUpdate()
	{
		$obj = TstKVObj::getCopy(array('autoid'=>99));
		$obj->setField('pkey', 91);
		$obj->setField('subkey', 92);
		$obj->setField('val', 'tst');
		$obj->update();
		$obj->db()->updRecords($obj->tbname(),array('iRecordVerID'=>'5'),array('autoid'=>99));
		TstKVObj::freeAll(array('autoid'=>99));
		$obj=null;
		
		$obj = TstKVObj::getCopy(array('autoid'=>99));
		$obj->load();
		$obj->setField('pkey', 99);
		$obj->update();
		
		$this->AssertEquals(6, $obj->db()->getOne($obj->tbname(),'iRecordVerID',array('autoid'=>99)), 'iRecordVerID changed error on update 1');
		$this->AssertEquals(6, $obj->getField('iRecordVerID'), 'iRecordVerID changed error on update 2');
		
	}
	public function testCache()
	{
		
	}
}